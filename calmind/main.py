import os
from datetime import datetime, timedelta

from calmind.config import Config
from calmind.calendars.google_calendar import GoogleCalendar
from calmind.calendars.apple_calendar import AppleCalendar
from calmind.llm.client import LLMClient
from calmind.llm.summarizer import LLMSummarizer
from calmind.reporting.generator import ReportGenerator
from calmind.emailing.sender import EmailSender

class CalMindApp:
    def __init__(self, config_path='config.yaml'):
        print(f"CalMindApp: Initializing application with config path: {config_path}")
        self.config = Config(config_path)
        self.llm_client = None
        self.llm_summarizer = None
        self.report_generator = ReportGenerator()
        self.email_sender = None

    def _initialize_llm(self):
        print("CalMindApp: Initializing LLM components...")
        api_key = self.config.get_llm_api_key()
        if not api_key or api_key == "YOUR_GEMINI_API_KEY":
            print("CalMindApp Warning: LLM API key not configured or is default. LLM summarization will not work.")
            return False
        try:
            self.llm_client = LLMClient(api_key)
            self.llm_summarizer = LLMSummarizer(self.llm_client)
            print("CalMindApp: LLM components initialized successfully.")
            return True
        except Exception as e:
            print(f"CalMindApp Error: Error initializing LLM: {e}")
            return False

    def _initialize_email_sender(self):
        print("CalMindApp: Initializing email sender...")
        email_config = self.config.get_email_sender_config()
        if not all([email_config['email'], email_config['password'], email_config['smtp_server'], email_config['smtp_port']]):
            print("CalMindApp Warning: Email sender configuration incomplete. Email reports will not be sent.")
            return False
        try:
            self.email_sender = EmailSender(
                sender_email=email_config['email'],
                sender_password=email_config['password'],
                smtp_server=email_config['smtp_server'],
                smtp_port=email_config['smtp_port']
            )
            print("CalMindApp: Email sender initialized successfully.")
            return True
        except Exception as e:
            print(f"CalMindApp Error: Error initializing email sender: {e}")
            return False

    def run_for_user(self, user_config: dict):
        user_name = user_config.get('name', 'Unknown User')
        report_to_email = user_config.get('report_to_email')
        days_to_fetch = user_config.get('days_to_fetch', 30)

        print(f"\n--- CalMindApp: Processing for user: {user_name} ---")

        all_events = []
        start_date = datetime.now()
        end_date = start_date + timedelta(days=days_to_fetch)
        print(f"CalMindApp: Fetching events from {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')} for {user_name}.")

        for cal_config in user_config.get('calendars', []):
            cal_type = cal_config.get('type').lower()
            cal_name = cal_config.get('name', 'Unnamed Calendar')
            print(f"CalMindApp: Attempting to access {cal_type} calendar: {cal_name}")

            calendar_instance = None
            if cal_type == 'google':
                calendar_instance = GoogleCalendar(cal_name, cal_config)
            elif cal_type == 'apple':
                calendar_instance = AppleCalendar(cal_name, cal_config)
            else:
                print(f"CalMindApp Warning: Unsupported calendar type: {cal_type}. Skipping calendar {cal_name}.")
                continue

            if calendar_instance:
                if calendar_instance.authenticate():
                    print(f"CalMindApp: Authenticated with {cal_name}. Fetching events...")
                    events = calendar_instance.get_events(start_date, end_date)
                    all_events.extend(events)
                    print(f"CalMindApp: Fetched {len(events)} events from {cal_name}.")
                else:
                    print(f"CalMindApp Error: Authentication failed for {cal_name}. Skipping event fetch.")
            else:
                print(f"CalMindApp Error: Calendar instance not created for {cal_name}.")

        if not all_events:
            print(f"CalMindApp: No events found for {user_name} in the specified period. Skipping summarization and reporting.")
            return

        # Summarize events
        summary_content = "No summary generated due to LLM issues."
        if self.llm_summarizer:
            print("CalMindApp: Summarizing events with LLM...")
            summary_content = self.llm_summarizer.summarize_events(all_events, user_name)
            print("CalMindApp: Summary generated by LLM.")
        else:
            print("CalMindApp Warning: LLM summarizer not initialized. Skipping summarization and falling back to raw events.")
            # Fallback: just list events if LLM is not available
            summary_content = "## Raw Events (LLM not available)\n\n"
            for event in all_events:
                summary_content += f"- {event.summary} ({event.start.strftime('%Y-%m-%d %H:%M')} - {event.end.strftime('%H:%M')})\n"

        # Generate reports
        print("CalMindApp: Generating reports...")
        html_report_path = self.report_generator.generate_html_report(user_name, summary_content)
        md_report_path = self.report_generator.generate_md_report(user_name, summary_content)

        # Send email
        if report_to_email and self.email_sender:
            print(f"CalMindApp: Sending email report to {report_to_email}...")
            try:
                with open(html_report_path, 'r', encoding='utf-8') as f:
                    html_report_content = f.read()
                subject = f"CalMind: Your Calendar Summary for {user_name}"
                self.email_sender.send_email(report_to_email, subject, html_report_content)
                print(f"CalMindApp: Email report sent to {report_to_email}.")
            except Exception as e:
                print(f"CalMindApp Error: Failed to send email report to {report_to_email}: {e}")
        else:
            print("CalMindApp: Email not sent (recipient not specified or email sender not initialized).")

    def run(self):
        print("CalMindApp: Starting CalMind application...")
        if not self._initialize_llm():
            print("CalMindApp: LLM will not be available for summarization.")
        if not self._initialize_email_sender():
            print("CalMindApp: Email sending will not be available.")

        users_config = self.config.get_users_config()
        if not users_config:
            print("CalMindApp Error: No users configured in config.yaml. Exiting.")
            return

        for user_config in users_config:
            self.run_for_user(user_config)

        print("CalMindApp: Application finished.")

if __name__ == '__main__':
    app = CalMindApp()
    app.run()
